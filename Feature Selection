def analyze_feature_importance(X, y, feature_names):
    X = np.array(X)
    y = np.array(y)

    f_scores, _ = f_classif(X, y)
    f_scores = MinMaxScaler().fit_transform(f_scores.reshape(-1, 1)).ravel()
    
    spearman_correlations = []
    for i in range(X.shape[1]):
        correlation, _ = spearmanr(X[:, i], y)
        spearman_correlations.append(abs(correlation))
    
    kendall_correlations = []
    for i in range(X.shape[1]):
        tau, _ = kendalltau(X[:, i], y)
        kendall_correlations.append(abs(tau))
    
    feature_importance_df = pd.DataFrame({
        'Feature': feature_names,
        'F_Score': f_scores,
        'Spearman_Correlation': spearman_correlations,
        "Kendall_Correlation" : kendall_correlations})
    
    scaler = StandardScaler()
    metrics_to_normalize = ['F_Score', 'Spearman_Correlation', "Kendall_Correlation"]
    normalized_values = scaler.fit_transform(feature_importance_df[metrics_to_normalize])
    
    for idx, metric in enumerate(metrics_to_normalize):
        feature_importance_df[f'{metric}_Norm'] = normalized_values[:, idx]
    
    norm_metric_columns = [f'{metric}_Norm' for metric in metrics_to_normalize]
    feature_importance_df['Combined_Score'] = feature_importance_df[norm_metric_columns].mean(axis=1)
    
    return feature_importance_df.sort_values('Combined_Score', ascending=False)



def plot_feature_importance(importance_df, top_n=20):
    """Plot feature importance analysis with normalized scores"""
    plt.figure(figsize=(30, 10))
    top_features = importance_df.head(top_n)
    plt.subplot(1, 2, 1)
    heatmap_data = top_features[['F_Score_Norm', 'Spearman_Correlation_Norm', "Kendall_Correlation_Norm"]].values
    sns.heatmap(heatmap_data.T, 
                xticklabels=top_features['Feature'],
                yticklabels=['F-Score', 'Spearman Corr', "Kendall Corr"],
                cmap='YlOrRd',
                center=0)
    plt.title('Feature Importance Heatmap (Normalized Scores)')
    plt.xticks(rotation=45, ha='right')
    plt.subplot(1, 2, 2)
    sns.barplot(data=top_features, x='Combined_Score', y='Feature')
    plt.title('Combined Feature Importance Score')
    plt.tight_layout()
    plt.show()


